program _12f675_PwmFet;

{ 12F675 PWM controller

  Copyright (C) 2015 rasberryrabbit

  This source is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free
  Software Foundation; either version 2 of the License, or MPL 1.1
  any later version.

  This code is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  details.

  A copy of the GNU General Public License is available on the World Wide Web
  at <http://www.gnu.org/copyleft/gpl.html>. You can also obtain it by writing
  to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
  MA 02111-1307, USA.
}

{.$define USE_OSCAL}
{.$define USE_OLD_SCH}
{.$define MAX_LOAD_RESET}
{.$define USE_PWM_SYNC}
{.$define INC_PWM_DUTY}

const
   c160 = 931;   // 16.0 * 1024 / 17.6
   c138 = 803;   // 13.8 * 1024 / 17.6
   c123 = 716;   // 12.3 * 1024 / 17.6
   c118 = 686;   // 11.8 * 1024 / 17.6
   c108 = 628;   // 10.8 * 1024 / 17.6
   c051 = 297;   // 5.1 * 1024 / 17.6
   c046 = 270;   // 4.63 * 1024 / 17.6
   c045 = 264;   // 4.54 * 1024 / 17.6
   c043 = 254;   // 4.36 * 1024 / 17.6
   c025 = 146;   // 2.5 * 1024 / 17.6
   cLow = 17;    // 0.3 * 1024 / 17.6
   { 4MHz }
   PWM_MAX = 187;   // 1000000 / 2 / 187, 84.5%, 2673.79Hz
   PWM_LOW = 0;
   
   TMR1L_LOAD=$17; // 1000000 / 1000, 65535-1000
   TMR1H_LOAD=$fc;

var
   LED1:sbit at {$ifndef USE_OLD_SCH}GP4_bit{$else}GP2_bit{$endif};
   PWM_SIG:sbit at GP0_bit;
   VOut5:sbit at GP3_bit;     // pin 4
   {$ifdef USE_PWM_SYNC}
   PWM_SYNC:sbit at GP5_bit;   // pin 2
   {$endif}
   PWM_TICK, ON_PWM, VOL_PWM:byte;
   TICK_1000:Byte;
   adc_vol:word;
   LED1_tm:byte;
   vTarget:word;
   i:byte;
   Tick_512:Byte;
   Tick_512_1:Byte;
   MaxLoad_Reset:bit;

procedure Interrupt(); iv 0x0004; ics ICS_AUTO;
begin
     if T0IF_bit=1 then begin
       { PWM MAX 84% }
       if PWM_SIG=1 then begin
         ON_PWM:=VOL_PWM;
         if ON_PWM=0 then
           TMR0:=255-PWM_MAX
         else begin
           TMR0:=255-ON_PWM;
           {$ifdef USE_PWM_SYNC}
           PWM_SYNC:=0;
           {$endif}
           PWM_SIG:=0;
         end;
       end else begin
         TMR0:=255-PWM_MAX+ON_PWM;
         {$ifdef INC_PWM_DUTY}
         // decrease off time. Increase PWM duty.
         if TMR0<=255-10 then
           TMR0:=TMR0+10
           else
             TMR0:=255;
         {$endif}
         PWM_SIG:=1;
         {$ifdef USE_PWM_SYNC}
         PWM_SYNC:=1;
         {$endif}
       end;
       T0IF_bit:=0;
     end else
     if T1IF_bit=1 then begin
       Inc(TICK_1000);
       TMR1L:=TMR1L_LOAD;
       TMR1H:=TMR1H_LOAD;
       if TICK_1000>LED1_Tm then begin
         LED1:=not LED1;
         TICK_1000:=0;
       end;
       {$ifdef MAX_LOAD_RESET}
       Inc(Tick_512);   // reset PWM every 6 seconds at Maxium PWM. it recover voltage drop on PV.
       if Tick_512=255 then begin
         Inc(Tick_512_1);
         if Tick_512_1=14 then begin
           if MaxLoad_Reset then
             VOL_PWM:=0;
           Tick_512_1:=0;
         end;
       end;
       {$endif}
       T1IF_bit:=0;
     end;
     if GPIF_bit=1 then begin
         if VOut5=0 then
           vTarget:=c051
           else
           vTarget:=c138;
         GPIF_bit:=0;
     end;
end;

procedure Read_ADC;
begin
   GO_NOT_DONE_bit:=1;
   while GO_NOT_DONE_bit=1 do ;
   Hi(adc_vol):=ADRESH;
   Lo(adc_vol):=ADRESL;
end;

begin
     {$ifdef USE_OSCAL}
     OSCCAL:=$34;
     {$endif}
     CMCON:=7;
     ANSEL:={$ifndef USE_OLD_SCH}%00010100{$else}%00010010{$endif};    // 2us tAD, channel 2

     TRISIO0_bit:=0;      // PWM
     TRISIO1_bit:=1;      // VREF or ADC
     {$ifndef USE_OLD_SCH}
     TRISIO2_bit:=1;      // ADC
     TRISIO4_bit:=0;      // LED
     {$else}
     TRISIO2_bit:=0;      // LED
     {$endif}
     {$ifdef USE_PWM_SYNC}
     TRISIO5_bit:=0;  // PWM_SYNC
     {$endif}
     LED1:=0;
     PWM_SIG:=1;
     {$ifdef USE_PWM_SYNC}
     PWM_SYNC:=0;
     {$endif}
     LED1_tm:=250;
     ON_PWM:=0;
     VOL_PWM:=0;
     TICK_1000:=0;
     {$ifdef MAX_LOAD_RESET}
     MaxLoad_Reset:=0;
     {$endif}

     OPTION_REG:=%01010000;        // ~2KHz @ 4MHz, enable weak pull-up
     TMR0IE_bit:=1;
     
     ADCON0:={$ifndef USE_OLD_SCH}%11001001{$else}%10000101{$endif};            // Right Justfied, VREF, Channel 2
     
     PEIE_bit:=1;
     
     T1CKPS0_bit:=1;               // timer prescaler 1:2
     TMR1CS_bit:=0;
     TMR1IE_bit:=1;
     TMR1L:=TMR1L_LOAD;
     TMR1H:=TMR1H_LOAD;

     adc_vol:=0;
     
     IOC3_bit:=1;
     GPIE_bit:=1;

     GIE_bit:=1;                   // enable Interrupt
     
     ADON_bit:=1;
     TMR1ON_bit:=1;
     
     GO_NOT_DONE_bit:=1;
      
     Delay_10ms;
     
     if VOut5=0 then begin
       vTarget:=c051;
     end else begin
       vTarget:=c138;
     end;

     
     while True do begin

         Read_ADC;
         if (adc_vol>vTarget) then begin
             repeat
               if VOL_PWM>PWM_LOW then
                 Dec(VOL_PWM)
                   else break;
               Read_ADC;
               if adc_vol>vTarget+29 then begin
                 VOL_PWM:=0;
                 Read_ADC;
               end;
             until adc_vol<=vTarget;
         end else if (adc_vol<vTarget) then begin
             repeat
               if VOL_PWM<PWM_MAX then begin
                 Inc(VOL_PWM);
                 {$ifdef MAX_LOAD_RESET}
                 MaxLoad_Reset:=0;
                 {$endif}
               end else begin
                     {$ifdef MAX_LOAD_RESET}
                     if VOut5=1 then
                       MaxLoad_Reset:=1;
                     {$endif}
                     break;
                   end;
               Read_ADC;
               if adc_vol>vTarget+29 then begin
                 VOL_PWM:=VOL_PWM shr 3;
                 Read_ADC;
               end;
             until adc_vol>=vTarget;
         end;

         if (Hi(adc_vol)=0) and (Lo(adc_vol)<=cLow) then
           LED1_tm:=64
           else if VOL_PWM=PWM_MAX then
             LED1_tm:=128
               else
                 LED1_tm:=240;
    end;
end.